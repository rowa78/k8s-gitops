rocketchat:  
  ## Host for the application
  ## set it to a domain pointing to your loadbalancer
  host: chat.rwcloud.org

  replicaCount: 1
  minAvailable: 1

  smtp:
    enabled: false
    username:
    password:
    host:
    port: 587
  
  mongodb:
    ## Enable or disable MongoDB dependency completely.
    enabled: true

    auth:
      rootPassword: rocketchat
      username: rocketchat
      password: rocketchat
      database: rocketchat

    architecture: replicaset
    replicaCount: 1
    arbiter:
      enabled: false
      pdb:
        minAvailable: 0
    pdb:
      minAvailable: 0

      # key:

    persistence:
      enabled: true
      ## mongodb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: "longhorn"
      accessMode: ReadWriteOnce
      size: 8Gi

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    # existingClaim: existingClaimName
    ## rocketchat data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "longhorn"
    accessMode: ReadWriteOnce
    size: 8Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources:
  #   requests:
  #     memory: 512Mi
  #     cpu: 300m

  ## Configure the ingress object to hook into existing infastructure
  ### ref : http://kubernetes.io/docs/user-guide/ingress/
  ###
  ingress:
    enabled: true
    pathType: Prefix
    ingressClassName: "nxinx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-production
      # kubernetes.io/ingress.class: "nginx"
    path: /
    tls: 
      - secretName: rocketchat-tls
        hosts:
          - chat.rwcloud.org

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

    labels: {}
    # key: value

    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP

    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000

    port: 80
  
  ## Optional Prometheus scraping Settings
  prometheusScraping:
    enabled: true
    port: 9100 # Avoid using 9458: conflicts with Moleculer Exporter

  serviceMonitor:
    ## serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
    ## prometheusScraping.enabled should be also enabled
    ##
    enabled: true
    ## metrics.serviceMonitor.interval The interval at which metrics should be scraped
    ##
    interval: 30s
    ## metrics.serviceMonitor.port The port name at which container exposes Prometheus metrics
    ##
    port: metrics
 