mariadb:
  global:
    storageClass: "openebs-hostpath"

  image:
    registry: docker.io
    repository: bitnami/mariadb
    tag: 10.9.3-debian-11-r6

  ## @param architecture MariaDB architecture (`standalone` or `replication`)
  ##
  architecture: replication
  ## MariaDB Authentication parameters
  ##
  auth:
    ## @param auth.existingSecret Use existing secret for password details (`auth.rootPassword`, `auth.password`, `auth.replicationPassword` will be ignored and picked up from this secret). The secret has to contain the keys `mariadb-root-password`, `mariadb-replication-password` and `mariadb-password`
    ##
    existingSecret: "seat-mariadb-secret"
    ## @param auth.forcePassword Force users to specify required passwords
    ##
    database: seat
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
    ##
    username: "seat"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    

  ## Mariadb Primary parameters
  ##
  primary:
    ## @param primary.nodeSelector Node labels for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: 
      obenebs.storage.node: "true"
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param primary.persistence.enabled Enable persistence on MariaDB primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
      ##
      enabled: true
      ## @param primary.persistence.accessModes MariaDB primary persistent volume access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param primary.persistence.size MariaDB primary persistent volume size
      ##
      size: 8Gi
    
  ## Mysqld Prometheus exporter parameters
  ##
  metrics:
    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: true
    ## @param metrics.image.registry Exporter image registry
    ## @param metrics.image.repository Exporter image repository
    ## @param metrics.image.tag Exporter image tag (immutable tags are recommended)
    ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param metrics.image.pullPolicy Exporter image pull policy
    ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.14.0-debian-11-r43
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param metrics.annotations [object] Annotations for the Exporter pod
    ##
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"
    ## @param metrics.extraArgs [object] Extra args to be passed to mysqld_exporter
    ## ref: https://github.com/prometheus/mysqld_exporter/
    ## E.g.
    ## - --collect.auto_increment.columns
    ## - --collect.binlog_size
    ## - --collect.engine_innodb_status
    ## - --collect.engine_tokudb_status
    ## - --collect.global_status
    ## - --collect.global_variables
    ## - --collect.info_schema.clientstats
    ## - --collect.info_schema.innodb_metrics
    ## - --collect.info_schema.innodb_tablespaces
    ## - --collect.info_schema.innodb_cmp
    ## - --collect.info_schema.innodb_cmpmem
    ## - --collect.info_schema.processlist
    ## - --collect.info_schema.processlist.min_time
    ## - --collect.info_schema.query_response_time
    ## - --collect.info_schema.tables
    ## - --collect.info_schema.tables.databases
    ## - --collect.info_schema.tablestats
    ## - --collect.info_schema.userstats
    ## - --collect.perf_schema.eventsstatements
    ## - --collect.perf_schema.eventsstatements.digest_text_limit
    ## - --collect.perf_schema.eventsstatements.limit
    ## - --collect.perf_schema.eventsstatements.timelimit
    ## - --collect.perf_schema.eventswaits
    ## - --collect.perf_schema.file_events
    ## - --collect.perf_schema.file_instances
    ## - --collect.perf_schema.indexiowaits
    ## - --collect.perf_schema.tableiowaits
    ## - --collect.perf_schema.tablelocks
    ## - --collect.perf_schema.replication_group_member_stats
    ## - --collect.slave_status
    ## - --collect.slave_hosts
    ## - --collect.heartbeat
    ## - --collect.heartbeat.database
    ## - --collect.heartbeat.table
    ##
    extraArgs:
      primary: []
      secondary: []
    ## @param metrics.extraVolumeMounts [object] Optionally specify extra list of additional volumeMounts for the MariaDB metrics container(s)
    ##
    extraVolumeMounts:
      primary: []
      secondary: []
    ## MariaDB metrics container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param metrics.containerSecurityContext.enabled Enable security context for MariaDB metrics container
    ## Example:
    ##   containerSecurityContext:
    ##     enabled: true
    ##     capabilities:
    ##       drop: ["NET_RAW"]
    ##     readOnlyRootFilesystem: true
    ##
    containerSecurityContext:
      enabled: false
    ## Mysqld Prometheus exporter resource requests and limits
    ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param metrics.resources.limits The resources limits for MariaDB prometheus exporter containers
    ## @param metrics.resources.requests The requested resources for MariaDB prometheus exporter containers
    ##
    resources:
      ## Example:
      ## limits:
      ##    cpu: 100m
      ##    memory: 256Mi
      ##
      limits: {}
      ## Examples:
      ## requests:
      ##    cpu: 100m
      ##    memory: 256Mi
      ##
      requests: {}
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param metrics.livenessProbe.enabled Enable livenessProbe
    ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## Configure extra options for readiness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param metrics.readinessProbe.enabled Enable readinessProbe
    ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 10
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: true
      ## @param metrics.serviceMonitor.namespace Namespace which Prometheus is running in
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""
      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
      ## e.g:
      ## scrapeTimeout: 30s
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      relabelings: []
      ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
      ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
      ##
      ## selector:
      ##   prometheus: my-prometheus
      ##
      selector: {}
      ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
      ##
      labels: {}
    ## Prometheus Operator PrometheusRule configuration
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
      ##
      enabled: true
      ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
      ##
      namespace: ""
      ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##  - alert: MariaDB-Down
      ##    expr: absent(up{job="mariadb"} == 1)
      ##    for: 5m
      ##    labels:
      ##      severity: warning
      ##      service: mariadb
      ##    annotations:
      ##      message: 'MariaDB instance {{ `{{` }} $labels.instance {{ `}}` }} is down'
      ##      summary: MariaDB instance is down
      ##
      rules: []
