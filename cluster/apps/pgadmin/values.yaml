pgadmin4:
  # Default values for pgAdmin4.

  replicaCount: 1

  ## pgAdmin4 container image
  ##
  image:
    registry: docker.io
    repository: dpage/pgadmin4
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
    pullPolicy: IfNotPresent

  ## Deployment annotations
  annotations: {}

  ## commonLabels Add labels to all the deployed resources
  commonLabels: {}

  ## priorityClassName
  priorityClassName: ""

  ## Deployment entrypoint override
  ## Useful when there's a requirement to modify container's default:
  ## https://www.vaultproject.io/docs/platform/k8s/injector/examples#environment-variable-example
  ## ref: https://github.com/postgres/pgadmin4/blob/master/Dockerfile#L206
  # command: "['/bin/sh', '-c', 'source /vault/secrets/config && <entrypoint script>']"

  service:
    type: ClusterIP
    clusterIP: ""
    loadBalancerIP: ""
    port: 80
    targetPort: 80
    # targetPort: 4181 To be used with a proxy extraContainer
    portName: http

    annotations: {}
      ## Special annotations at the service level, e.g
      ## this will set vnet internal IP's rather than public ip's
      ## service.beta.kubernetes.io/azure-load-balancer-internal: "true"

    ## Specify the nodePort value for the service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:

  ## Pod Service Account
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
    # Opt out of API credential automounting.
    # If you don't want the kubelet to automatically mount a ServiceAccount's API credentials,
    # you can opt out of the default behavior
    automountServiceAccountToken: false

  ## Pod HostAliases
  ## ref: https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/
  ##
  hostAliases:
    # - ip: "127.0.0.1"
    #   hostnames:
    #   - "pgadmin4.local"

  ## Strategy used to replace old Pods by new ones
  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  ##
  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 0
    #   maxUnavailable: 1

  ## Server definitions will be loaded at launch time. This allows connection
  ## information to be pre-loaded into the instance of pgAdmin4 in the container.
  ## Note that server definitions are only loaded on first launch,
  ## i.e. when the configuration database is created, and not on subsequent launches using the same configuration database.
  ## Ref: https://www.pgadmin.org/docs/pgadmin4/latest/import_export_servers.html
  ##
  serverDefinitions:
    ## If true, server definitions will be created
    ##
    enabled: false

    ## The resource type to use for deploying server definitions.
    ## Can either be ConfigMap or Secret
    resourceType: ConfigMap

    # If resource type is set to ConfigMap, specify existingConfigmap containing definitions
    existingConfigmap: ""

    # If resource type is set to Secret, specify existingSecret containing definitions
    existingSecret: ""

    servers:
    #  firstServer:
    #    Name: "Minimally Defined Server"
    #    Group: "Servers"
    #    Port: 5432
    #    Username: "postgres"
    #    Host: "localhost"
    #    SSLMode: "prefer"
    #    MaintenanceDB: "postgres"

  networkPolicy:
    enabled: true

  ## Ingress
  ## Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: true
    annotations: 
      cert-manager.io/cluster-issuer: letsencrypt-production
      nginx.ingress.kubernetes.io/auth-signin: https://oauth2-proxy.rwcloud.org/oauth2/start?rd=$scheme://$host$request_uri
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: PGAdmin4
      gethomepage.dev/group: Apps
      gethomepage.dev/icon: pgadmin4.svg
      gethomepage.dev/name: PGAdmin4
      gethomepage.dev/app: PGAdmin4
      gethomepage.dev/pod-selector: ""
    # ingressClassName: ""
    hosts:
      - host: pgadmin.rwcloud.org
        paths:
          - path: /
            pathType: Prefix
    tls: 
      - secretName: pgadmin-tls
        hosts:
          - pgadmin.rwcloud.org

  # Additional config maps to be mounted inside a container
  # Can be used to map config maps for sidecar as well
  extraConfigmapMounts: []
    # - name: certs-configmap
    #   mountPath: /etc/ssl/certs
    #   subPath: ""
    #   configMap: certs-configmap
    #   readOnly: true

  extraSecretMounts: []
    # - name: pgpassfile
    #   secret: pgpassfile
    #   subPath: pgpassfile
    #   mountPath: "/var/lib/pgadmin/storage/pgadmin/file.pgpass"
    #   readOnly: true

  ## @param existingSecret Name of existing secret to use for default pgadmin credentials. `env.password` will be ignored and picked up from this secret.
  ##
  existingSecret: ""
  ## @param secretKeys.pgadminPasswordKey Name of key in existing secret to use for default pgadmin credentials. Only used when `existingSecret` is set.
  ##
  secretKeys:
    pgadminPasswordKey: password

  ## Additional environment variables from ConfigMaps
  envVarsFromConfigMaps: []
    # - array-of
    # - config-map-names

  ## Additional environment variables from Secrets
  envVarsFromSecrets: []
    # - array-of
    # - secret-names

  ## Additional environment variables
  envVarsExtra: []
    # - name: POSTGRES_USERNAME
    #   valueFrom:
    #     secretKeyRef:
    #       name: pgadmin.pgadmin-db.credentials.postgresql.acid.zalan.do
    #       key: username
    # - name: POSTGRES_PASSWORD
    #   valueFrom:
    #     secretKeyRef:
    #       name: pgadmin.pgadmin-db.credentials.postgresql.acid.zalan.do
    #       key: password

  persistentVolume:
    ## If true, pgAdmin4 will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## pgAdmin4 Persistent Volume Claim annotations
    ##
    annotations: {}

    ## pgAdmin4 Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    accessModes:
      - ReadWriteOnce

    ## pgAdmin4 Persistent Volume Size
    ##
    size: 10Gi

    ## pgAdmin4 Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "nfs-client"
    # existingClaim: ""

    ## Subdirectory of pgAdmin4 Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ""

  