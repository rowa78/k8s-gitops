blocky:
  #
  # IMPORTANT NOTE
  #
  # This chart inherits from our common library chart. You can check the default values/options here:
  # https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
  #

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: location
            operator: In
            values:
            - lan

  tolerations:
    - key: pi-node
      operator: Exists
      effect: NoSchedule

  image:
    # -- image repository
    repository: ghcr.io/0xerr0r/blocky
    # -- image tag
    # @default -- chart.appVersion
    tag: v0.23
    # -- image pull policy
    pullPolicy: IfNotPresent

  controller:
    # -- Set the controller upgrade strategy
    strategy: RollingUpdate
    # -- (int) Number of pods to load balance between
    replicas: 1

  # -- environment variables. See [image docs](https://0xerr0r.github.io/blocky/installation/#run-with-docker) for more details.
  # @default -- See below
  env:
    # -- Set the container timezone
    TZ: Europe/Berlin

  # -- Configures service settings for the chart.
  # @default -- See values.yaml
  service:
    main:
      enabled: false
      ports:
        http:
          port: 4000
    dns-tcp:
      enabled: false
      type: ClusterIP
      externalTrafficPolicy: Local
      ports:
        dns-tcp:
          enabled: true
          port: 53
          protocol: TCP
          targetPort: 53
    dns-udp:
      enabled: true
      type: LoadBalancer
      externalTrafficPolicy: Local
      loadBalancerIP: 192.168.0.241
      ports:
        dns-udp:
          enabled: true
          port: 53
          protocol: UDP
          targetPort: 53

  # -- Enable and configure ingress settings for the chart under this key.
  # @default -- See values.yaml
  ingress:
    main:
      enabled: false
      hosts:
        - host: blocky-api.local
          paths:
          - path: /
            pathType: Prefix
            service:
              port: 4000

  # -- Configure persistence settings for the chart under this key.
  # @default -- See values.yaml
  persistence:
    logs:
      enabled: false
      mountPath: /logs

  metrics:
    # -- Enable and configure a Prometheus serviceMonitor for the chart under this key.
    # @default -- See values.yaml
    enabled: false
    serviceMonitor:
      # -- Interval at which Prometheus should scrape metrics
      interval: 30s
      # -- Timeout after which the scrape is ended
      scrapeTimeout: 10s
      # -- Additional labels for the Kubernetes `ServiceMonitor` object
      labels: {}
      # -- The Kubernetes `Endpoints` label to use as the Prometheus job name
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service`` onto the created metrics.
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod`` onto the created metrics.
      podTargetLabels: []
    # -- Enable and configure Prometheus Rules for the chart under this key.
    # @default -- See values.yaml
    prometheusRule:
      enabled: false
      labels: {}
      # -- Configure additionial rules for the chart under this key.
      # @default -- See prometheusrules.yaml
      rules: []
        # - alert: BlockyDisabled
        #   annotations:
        #     description: Blocky's ad blocking has been disabled for 15min.
        #       Please re-enable protection.
        #     summary: Blocky is disabled.
        #   expr: |
        #     blocky_blocking_enabled == 0
        #   for: 15m
        #   labels:
        #     severity: critical

  # -- Enable and configure redis subchart under this key.
  # Useful if you're running more than one replica of blocky dns.
  # For more options see [redis chart documentation](https://github.com/bitnami/charts/tree/master/bitnami/redis)
  # @default -- See values.yaml
  redis:
    enabled: false
    # auth:
    #   enabled: false

  # -- Full list of options https://github.com/0xERR0R/blocky/blob/v0.18/docs/config.yml
  # @default -- see URL to default config
  config: |
    upstream:
      default:
        - 1.1.1.1
        - 1.0.0.1

    bootstrapDns:
    - tcp+udp:1.1.1.1
    - https://1.1.1.1/dns-query
    - upstream: https://dns.digitale-gesellschaft.ch/dns-query
      ips:
        - 185.95.218.42

    ports:
      dns: 53
      http: 4000

    # optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
    blocking:
      # definition of blacklist groups. Can be external link (http/https) or local file
      blackLists:
        ads:
          - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
          - http://sysctl.org/cameleon/hosts
          - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
          - |
            # inline definition with YAML literal block scalar style
            someadsdomain.com
            *.example.com        
        special:
          - https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts
      # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
      whiteLists:
        ads:
          - whitelist.txt
          - |
            # inline definition with YAML literal block scalar style
            # hosts format
            whitelistdomain.com
            # this is a regex
            /^banners?[_.-]/        
      # definition: which groups should be applied for which client
      clientGroupsBlock:
        # default will be used, if no special definition for a client name exists
        default:
          - ads
          - special
        # use client name (with wildcard support: * - sequence of any characters, [0-9] - range)
        # or single ip address / client subnet as CIDR notation
        # laptop*:
        #   - ads
        # 192.168.178.1/24:
        #   - special
      # which response will be sent, if query is blocked:
      # zeroIp: 0.0.0.0 will be returned (default)
      # nxDomain: return NXDOMAIN as return code
      # comma separated list of destination IP addresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
      blockType: zeroIp
      # optional: TTL for answers to blocked domains
      # default: 6h
      blockTTL: 1m
      # optional: Configure how lists, AKA sources, are loaded
      loading:
    # optional: list refresh period in duration format.
    # Set to a value <= 0 to disable.
    # default: 4h
    refreshPeriod: 24h
    # optional: Applies only to lists that are downloaded (HTTP URLs).
    downloads:
      # optional: timeout for list download (each url). Use large values for big lists or slow internet connections
      # default: 5s
      timeout: 60s
      # optional: Maximum download attempts
      # default: 3
      attempts: 5
      # optional: Time between the download attempts
      # default: 500ms
      cooldown: 10s
    # optional: Maximum number of lists to process in parallel.
    # default: 4
    concurrency: 16
    # Configure startup behavior.
    # accepted: blocking, failOnError, fast
    # default: blocking
    strategy: failOnError
    # Number of errors allowed in a list before it is considered invalid.
    # A value of -1 disables the limit.
    # default: 5
    maxErrorsPerSource: 5
