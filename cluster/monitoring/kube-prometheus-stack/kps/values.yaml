kube-prometheus-stack:
  fullnameOverride: kps
  alertmanager:
    externalUrl: https://alertmanager.rwcloud.org
    fullnameOverride: alertmanager
    replicas: 1
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 1Gi
      useExistingSecret: true
      configSecret: alertmanager-config
      podAntiAffinity: hard
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        nginx.ingress.kubernetes.io/auth-method: GET
        nginx.ingress.kubernetes.io/auth-url: http://authelia.authelia.svc.cluster.local/api/verify
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rwcloud.org?rm=$request_method
        nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Method $request_method;
        hajimari.io/enable: "true"
        hajimari.io/icon: "monitor-eye"                    
        hajimari.io/group: system
        hajimari.io/appName: alertmanager
      hosts:
        - &host alertmanager.rwcloud.org
      tls:
        - hosts:
            - *host
          secretName: alertmanager-tls

  grafana:
    fullnameOverride: grafana
    defaultDashboardsTimezone: Europe/Berlin
    persistence:
      enabled: true
      type: statefulset
      storageClassName: longhorn
      size: 1Gi
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        nginx.ingress.kubernetes.io/auth-method: GET
        nginx.ingress.kubernetes.io/auth-url: http://authelia.authelia.svc.cluster.local/api/verify
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rwcloud.org?rm=$request_method
        nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Method $request_method;
        hajimari.io/enable: "true"
        hajimari.io/icon: "monitor-eye"                    
        hajimari.io/group: system
        hajimari.io/appName: grafana
      hosts:
        - &host grafana.rwcloud.org
      tls:
        - hosts:
            - *host
          secretName: grafana-tls
    sidecar:
      datasources:
        enabled: true
        searchNamespace: ALL
      dashboards:
        enabled: true
        searchNamespace: ALL
        folderAnnotation: grafana_folder
        provider:
          foldersFromFilesStructure: true
          disableDeletion: true
          allowUiUpdates: true
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: true
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        longhorn:
          url: https://grafana.com/api/dashboards/13032/revisions/6/download
          datasource: Prometheus
        node-exporter-full:
          url: https://grafana.com/api/dashboards/1860/revisions/22/download
          datasource: Prometheus
        ingress-nginx:
          url: https://grafana.com/api/dashboards/9614/revisions/1/download
          datasource: Prometheus
        ingress-nginx-nextgen:
          url: https://grafana.com/api/dashboards/14314/revisions/2/download
          datasource: Prometheus
        ingress-nginx-loki:
          url: https://grafana.com/api/dashboards/12559/revisions/11/download
        argocd:
          url: https://raw.githubusercontent.com/argoproj/argo-cd/master/examples/dashboard.json
        thanos:
          url: https://grafana.com/api/dashboards/12937/revisions/4/download
    grafana.ini:
      analytics:
        check_for_updates: false
      server:
        root_url: https://grafana.rwcloud.org
        enable_gzip: true
      auth.ldap:
        enabled: true
        allow_sign_up: true
        config_file: /etc/grafana/ldap.toml
    ldap:
      enabled: false
      existingSecret: grafana
    admin:
      existingSecret: grafana
    envFromSecret: grafana-smtp    
  prometheus:
    fullnameOverride: prometheus
    prometheusSpec:
      replicas: 1
      externalUrl: https://prometheus.rwcloud.org
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 50Gi     
      ## How long to retain metrics
      ##
      retention: 10d

      ## Maximum size of metrics
      ##
      retentionSize: "40GiB" 
      podAntiAffinity: hard
      thanos: {}        
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-production
        nginx.ingress.kubernetes.io/auth-method: GET
        nginx.ingress.kubernetes.io/auth-url: http://authelia.authelia.svc.cluster.local/api/verify
        nginx.ingress.kubernetes.io/auth-signin: https://auth.rwcloud.org?rm=$request_method
        nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
        nginx.ingress.kubernetes.io/auth-snippet: |
          proxy_set_header X-Forwarded-Method $request_method;
        hajimari.io/enable: "true"
        hajimari.io/icon: "monitor-eye"                    
        hajimari.io/group: system
        hajimari.io/appName: prometheus
      hosts:
        - &host prometheus.rwcloud.org
      tls:
        - hosts:
            - *host
          secretName: prometheus-tls
    thanosService:
      enabled: false
    thanosServiceMonitor:
      enabled: false
  prometheusOperator:
    fullnameOverride: prometheus-operator
  prometheus-node-exporter:
    fullnameOverride: node-exporter
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
  kubeEtcd:
    service:
      port: 2381
      targetPort: 2381
  kubeProxy:
    enabled: true
    endpoints: ["192.168.1.101"]
    service:
      enabled: true
      port: 10249
      targetPort: 10249
  kubeScheduler:
    enabled: true
    endpoints: ["192.168.1.101"]
    service:
      enabled: true
      port: 10259
      targetPort: 10259
    serviceMonitor:
      enabled: true
      https: true
  kubeControllerManager:
    enabled: true
    endpoints: ["192.168.1.101"]
    service:
      enabled: true
      port: 10257
      targetPort: 10257
    serviceMonitor:
      enabled: true
      https: true
alertmanager-discord:  
  image:
    # -- image repository
    repository: rogerrum/alertmanager-discord
    # -- image tag
    tag: 1.0.3
    # -- image pull policy
    pullPolicy: IfNotPresent

  # -- environment variables. See [image docs](https://github.com/metalmatze/alertmanager-bot) for more configuration options.
  # @default -- See below
  env:
    # -- Discord Username
    DISCORD_USERNAME: "Alertmanager"
  #   -- Discord Avatar icon
  #  DISCORD_AVATAR_URL: "https://avatars3.githubusercontent.com/u/3380462"
  #   -- Enable Verbose mode (log request and responses)
  #  VERBOSE: "ON"
  #   -- Discord Webhook - Can be used from envValueFrom secrets
  #  DISCORD_WEBHOOK=""
    DISCORD_WEBHOOK:
      valueFrom:
        secretKeyRef:
          name: alertmanager-discord-secret
          key: DISCORD_WEBHOOK


  # -- Configures service settings for the chart. Normally this does not need to be modified.
  service:
    main:
      enabled: true
      ports:
        http:
          port: 9094

  # -- Enable and configure ingress settings for the chart under this key.
  # @default -- Disabled
  ingress:
    main:
      enabled: false

  # -- Configures probes for the chart. Normally this does not need to be modified.
  # @default -- Disabled
  probes:
    liveness:
      enabled: false
    readiness:
      enabled: false
    startup:
      enabled: false

  # -- Configure persistence settings for the chart under this key.
  # @default -- See values.yaml
  persistence:
    data:
      enabled: false




