kubewarden-controller:
  # This file was autogenerated.

  # Common settings across multiple charts. These settings will be used
  # by more than one chart and they ideally need to match during the
  # installation of the charts consuming this values.
  global:
    cattle:
      systemDefaultRegistry: ghcr.io
    skipNamespaces:
      - calico-system
      - cattle-alerting
      - cattle-ui-plugin-system
      - cattle-fleet-clusters-system
      - cattle-provisioning-capi-system
      - cattle-fleet-local-system
      - cattle-fleet-system
      - cattle-global-data
      - cattle-global-nt
      - cattle-impersonation-system
      - cattle-istio
      - cattle-logging
      - cattle-monitoring-system
      - cattle-neuvector-system
      - cattle-pipeline
      - cattle-prometheus
      - cattle-system
      - cert-manager
      - fleet-default
      - fleet-local
      - ingress-nginx
      - kube-node-lease
      - kube-public
      - kube-system
      - longhorn-system
      - rancher-operator-system
      - security-scan
      - tigera-operator
    policyServer:
      default:
        name: default
        enabled: true
  # Settings for kubewarden-controller.
  # nameOverride Replaces the release name of the chart in Chart.yaml file when
  # this is used to construct Kubernetes object names
  nameOverride: ""
  # fullnameOverride completely replaces the generated release name
  fullnameOverride: ""
  # Secrets to pull container images from private registries
  imagePullSecrets: []
  # -- Additional labels to add to all resources
  additionalLabels: {}
  #   app: kubewarden-controller
  # -- Additional annotations to add to all resources
  additionalAnnotations: {}
  #   owner: IT-group1
  # SecurityContext to be used in the controller and audit-scanner containers. The
  # content of the containerSecurityContext will be set directly as the
  # securityContext of the container
  containerSecurityContext:
    allowPrivilegeEscalation: false
  # SecurityContext to be used in the controller and audit-scanner pods. The
  # content of the podSecurityContext will be set directly as the securityContext
  # of the pod
  podSecurityContext:
    runAsNonRoot: true
  # SecurityContext to be used in the pre-delete-hook job container and pod.
  # The content of the next fields will be set directly as the securityContext
  # of the container and pod used in the pre-delete-hook job.
  preDeleteHook:
    containerSecurityContext:
      allowPrivilegeEscalation: false
    podSecurityContext:
      runAsNonRoot: true
  # open-telemetry options
  telemetry:
    metrics:
      enabled: true
      # port of the prometheus exporter and PolicyServer metric service
      port: 8080
    tracing:
      enabled: false
      jaeger: {}
      # OTLP/Jaeger endpoint to send traces to
      # endpoint: "all-in-one-collector.jaeger.svc.cluster.local:4317"
      # tls:
      #  insecure: true
  image:
    # The registry is defined in the global.cattle.systemDefaultRegistry value
    # controller image to be used
    repository: "kubewarden/kubewarden-controller"
    # image tag
    tag: v1.8.1
    pullPolicy: IfNotPresent
  preDeleteJob:
    image:
      # The registry is defined in the global.cattle.systemDefaultRegistry value
      # kubectl image to be used in the pre-delete helm hook
      repository: "kubewarden/kubectl"
      tag: "v1.27.6"
  # kubewarden-controller deployment settings:
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  tls:
    # source options:
    # - "cert-manager-self-signed": Scaffold cert-manager integration, and create
    #   a self-signed certificate with a cert-manager self-signed Issuer. Depends
    #   on cert-manager. (default)
    # - "cert-manager": Scafffold cert-manager integration. User configures their
    #   own Issuer. Depends on cert-manager. Set tls.certManagerIssuerName to the
    #   desired Issuer.
    source: cert-manager-self-signed
    # "cert-manager"-only options:
    certManagerIssuerName: ""
  # Resource limits & requests
  # Ref: https://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    controller:
      limits:
        cpu: 500m
        memory: 50Mi
      requests:
        cpu: 250m
        memory: 50Mi
    auditScanner:
      limits:
        cpu: 500m
        memory: 50Mi
      requests:
        cpu: 250m
        memory: 50Mi
  # Controller replicas
  replicas: 1
  auditScanner:
    enable: true
    policyReporter: true
    # The default audit-scanner ServiceAccount is bound to the ClusterRoles:
    # - view: Allows read-only access to most objects in a namespace.
    #   Does not allow viewing secrets, roles or role bindings.
    # - audit-scanner-cluster-role: Allows read-write to Kubewarden resources
    #   and PolicyReports
    serviceAccountName: audit-scanner
    image:
      # The registry is defined in the common.cattle.systemDefaultRegistry value
      # kubectl image to be used in the pre-delete helm hook
      repository: "kubewarden/audit-scanner"
      tag: v1.8.1
      pullPolicy: IfNotPresent
    cronJob:
      schedule: "*/60 * * * *" # every 60 minutes
      failedJobsHistoryLimit: 5
      successfulJobsHistoryLimit: 3
    containerRestartPolicy: Never
    # Additional namespaces that the audit scanner will not scan:
    skipAdditionalNamespaces: []
    # level of logs. One of trace, debug, info, warn, error, fatal
    logLevel: info
    # Output result of scan to stdout in JSON upon completion
    outputScan: true
  # Values to configure the policy reporter subchart enabled by the
  # auditScanner.policyReporter flag
  policy-reporter:
    image:
      registry: ghcr.io
      repository: kyverno/policy-reporter
      tag: 2.16.1
    ui:
      enabled: true
      image:
        registry: ghcr.io
        repository: kyverno/policy-reporter-ui
        tag: 1.9.2


kubewarden-defaults:
  # This file was autogenerated.

  # Common settings across multiple charts. These settings will be used
  # by more than one chart and they ideally need to match during the
  # installation of the charts consuming this values.
  global:
    cattle:
      systemDefaultRegistry: ghcr.io
    skipNamespaces:
      - calico-system
      - cattle-alerting
      - cattle-ui-plugin-system
      - cattle-fleet-clusters-system
      - cattle-provisioning-capi-system
      - cattle-fleet-local-system
      - cattle-fleet-system
      - cattle-global-data
      - cattle-global-nt
      - cattle-impersonation-system
      - cattle-istio
      - cattle-logging
      - cattle-monitoring-system
      - cattle-neuvector-system
      - cattle-pipeline
      - cattle-prometheus
      - cattle-system
      - cert-manager
      - fleet-default
      - fleet-local
      - ingress-nginx
      - kube-node-lease
      - kube-public
      - kube-system
      - longhorn-system
      - rancher-operator-system
      - security-scan
      - tigera-operator
    policyServer:
      default:
        name: default
        enabled: true
  # -- Additional labels to add to all resources
  additionalLabels: {}
  # app: kubewarden-defaults
  # -- Additional annotations to add to all resources
  additionalAnnotations: {}
  # owner: IT-group1
  # Policy Server settings
  policyServer:
    replicaCount: 1
    image:
      # The registry is defined in the global.cattle.systemDefaultRegistry value
      repository: "kubewarden/policy-server"
      tag: v1.8.0
    serviceAccountName: policy-server
    # verificationConfig: your_configmap
    # Configmap containing a Sigstore verification configuration under a key
    # named `verification-config`. Must be on the same ns as the PolicyServer.
    permissions:
      # All permissions are cluster-wide. Even namespaced resources are
      # granted access in all namespaces at this time.
      - apiGroup: ""
        resources:
          - namespaces
          - pods
          - services
      - apiGroup: "networking.k8s.io"
        resources:
          - ingresses
    env:
      - name: KUBEWARDEN_LOG_LEVEL
        value: info
    annotations: {}
    # imagePullSecret stores the secret name used to pull images from repositories.
    # The secret should be in the same namespace of the Policy Server
    #
    # Example of usage:
    # imagePullSecret: "mysecret"
    imagePullSecret:
    # insecureSources stores a list of allowed insecure registries.
    #
    # Example of usage:
    #insecureSources:
    #  - "source1"
    #  - "source2"
    insecureSources:
    # sourceAuthorities is a list of the URIs and their PEM encoded certificates
    # used to authenticate them
    #
    # Example of usage:
    # sourceAuthorities:
    #   - uri: "uri1"
    #     certs:
    #       - "cert1"
    #       - "cert2"
    #   - uri: "uri2"
    #     certs:
    #       - "cert3"
    #   - uri: "uri3"
    #     certs:
    #       - "cert4"
    sourceAuthorities: {}
  crdVersion: "policies.kubewarden.io/v1"
  recommendedPolicies:
    enabled: true
    # Used to define the registry where the Kubewarden policies are mirrored.
    # This can be useful if the registry used to mirror container images does
    # not support OCI artifacts.
    # If this field is not defined, the systemDefaultRegistry is used by default.
    defaultPoliciesRegistry: ""
    # Additional namespaces that recommended policies will not apply to:
    skipAdditionalNamespaces: []
    defaultPolicyMode: "monitor"
    allowPrivilegeEscalationPolicy:
      module: "kubewarden/policies/allow-privilege-escalation-psp:v0.2.6"
      name: "no-privilege-escalation"
    hostNamespacePolicy:
      module: "kubewarden/policies/host-namespaces-psp:v0.1.6"
      name: "no-host-namespace-sharing"
    podPrivilegedPolicy:
      module: "kubewarden/policies/pod-privileged:v0.2.7"
      name: "no-privileged-pod"
    userGroupPolicy:
      module: "kubewarden/policies/user-group-psp:v0.4.9"
      name: "do-not-run-as-root"
    hostPathsPolicy:
      module: "kubewarden/policies/hostpaths-psp:v0.1.10"
      name: "do-not-share-host-paths"
      paths:
        - pathPrefix: "/tmp"
          readOnly: true
    capabilitiesPolicy:
      module: "kubewarden/policies/capabilities-psp:v0.1.13"
      name: "drop-capabilities"
      allowed_capabilities: []
      required_drop_capabilities:
        - ALL
      default_add_capabilities: []
